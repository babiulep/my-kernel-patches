diff -rupN a/scripts/package/debian/rules b/scripts/package/debian/rules
--- a/scripts/package/debian/rules	2025-04-06 20:43:13.000000000 +0200
+++ b/scripts/package/debian/rules	2025-04-06 23:01:17.083913086 +0200
@@ -21,18 +21,14 @@ ifeq ($(origin KBUILD_VERBOSE),undefined
     endif
 endif
 
-revision = $(shell dpkg-parsechangelog -S Version | sed -n 's/.*-//p')
+revision = $(lastword $(subst -, ,$(shell dpkg-parsechangelog -S Version)))
 CROSS_COMPILE ?= $(filter-out $(DEB_BUILD_GNU_TYPE)-, $(DEB_HOST_GNU_TYPE)-)
-make-opts = ARCH=$(ARCH) KERNELRELEASE=$(KERNELRELEASE) \
-    $(addprefix KBUILD_BUILD_VERSION=,$(revision)) \
-    $(addprefix CROSS_COMPILE=,$(CROSS_COMPILE))
+make-opts = ARCH=$(ARCH) KERNELRELEASE=$(KERNELRELEASE) KBUILD_BUILD_VERSION=$(revision) $(addprefix CROSS_COMPILE=,$(CROSS_COMPILE))
 
-binary-targets := $(addprefix binary-, image image-dbg headers libc-dev)
+binary-targets := $(addprefix binary-, image headers)
 
 all-packages = $(shell dh_listpackages)
 image-package = $(filter linux-image-% user-%, $(filter-out %-dbg, $(all-packages)))
-image-dbg-package = $(filter %-dbg, $(all-packages))
-libc-dev-package = $(filter linux-libc-dev, $(all-packages))
 headers-package = $(filter linux-headers-%, $(all-packages))
 
 mk-files = $(patsubst binary-%,debian/%.files,$1)
@@ -43,10 +39,6 @@ package = $($(@:binary-%=%-package))
 # which package is being processed in the build log.
 DH_OPTIONS = -p$(package)
 
-# Note: future removal of KDEB_COMPRESS
-# dpkg-deb >= 1.21.10 supports the DPKG_DEB_COMPRESSOR_TYPE environment
-# variable, which provides the same functionality as KDEB_COMPRESS. The
-# KDEB_COMPRESS variable will be removed in the future.
 define binary
 	$(Q)dh_testdir $(DH_OPTIONS)
 	$(Q)dh_testroot $(DH_OPTIONS)
diff -rupN a/scripts/package/mkdebian b/scripts/package/mkdebian
--- a/scripts/package/mkdebian	2025-04-06 20:43:13.000000000 +0200
+++ b/scripts/package/mkdebian	2025-04-06 23:01:17.083913086 +0200
@@ -77,8 +77,6 @@ set_debarch() {
 			debarch=i386
 		fi
 		;;
-	loongarch64)
-		debarch=loong64 ;;
 	esac
 	if [ -z "$debarch" ]; then
 		debarch=$(dpkg-architecture -qDEB_HOST_ARCH)
@@ -157,12 +155,11 @@ while [ $# -gt 0 ]; do
 done
 
 # Some variables and settings used throughout the script
+version=$KERNELRELEASE
 if [ "${KDEB_PKGVERSION:+set}" ]; then
 	packageversion=$KDEB_PKGVERSION
 else
-	upstream_version=$("${srctree}/scripts/setlocalversion" --no-local "${srctree}" | sed 's/-\(rc[1-9]\)/~\1/')
-	debian_revision=$("${srctree}/scripts/build-version")
-	packageversion=${upstream_version}-${debian_revision}
+	packageversion=$(${srctree}/scripts/setlocalversion --no-local ${srctree})-$($srctree/scripts/build-version)
 fi
 sourcename=${KDEB_SOURCENAME:-linux-upstream}
 
@@ -215,53 +212,28 @@ Build-Depends-Arch: bc, bison, flex,
  python3:native, rsync
 Homepage: https://www.kernel.org/
 
-Package: $packagename-${KERNELRELEASE}
+Package: $packagename-$version
 Architecture: $debarch
-Description: Linux kernel, version ${KERNELRELEASE}
+Description: Linux kernel, version $version
  This package contains the Linux kernel, modules and corresponding other
- files, version: ${KERNELRELEASE}.
+ files, version: $version.
 EOF
 
 if [ "${SRCARCH}" != um ]; then
-cat <<EOF >> debian/control
-
-Package: linux-libc-dev
-Section: devel
-Provides: linux-kernel-headers
-Architecture: $debarch
-Description: Linux support headers for userspace development
- This package provides userspaces headers from the Linux kernel.  These headers
- are used by the installed headers for GNU glibc and other system libraries.
-Multi-Arch: same
-EOF
-
 if is_enabled CONFIG_MODULES; then
 cat <<EOF >> debian/control
 
-Package: linux-headers-${KERNELRELEASE}
+Package: linux-headers-$version
 Architecture: $debarch
 Build-Profiles: <!pkg.${sourcename}.nokernelheaders>
-Description: Linux kernel headers for ${KERNELRELEASE} on $debarch
- This package provides kernel header files for ${KERNELRELEASE} on $debarch
+Description: Linux kernel headers for $version on $debarch
+ This package provides kernel header files for $version on $debarch
  .
  This is useful for people who need to build external modules
 EOF
 fi
 fi
 
-if is_enabled CONFIG_DEBUG_INFO; then
-cat <<EOF >> debian/control
-
-Package: linux-image-${KERNELRELEASE}-dbg
-Section: debug
-Architecture: $debarch
-Build-Profiles: <!pkg.${sourcename}.nokerneldbg>
-Description: Linux kernel debugging symbols for ${KERNELRELEASE}
- This package will come in handy if you need to debug the kernel. It provides
- all the necessary debug symbols for the kernel and its modules.
-EOF
-fi
-
 cat <<EOF > debian/rules.vars
 ARCH := ${ARCH}
 KERNELRELEASE := ${KERNELRELEASE}
